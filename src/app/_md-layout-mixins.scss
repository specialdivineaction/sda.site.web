// retrieved from the following angular/material sources on 2016-02-03:
//   - https://github.com/angular/material/blob/eb1249da5c4db0f352370227e3dd1cc84efebb74/src/core/style/layout.scss
//   - https://github.com/angular/material/blob/00152a2d1aa52b598b0095598ad02835fdca9f7e/src/core/services/layout/layout.scss
//   - https://github.com/angular/material/blob/eb1695a0d54f6794a08f04169ad8a390b92a1849/src/core/style/variables.scss
// released under the MIT license
// modified and annotated for use in the SDA project

@import 'md-layout-variables';

// the following content is from src/core/style/layout.scss with minimal modifications (i.e. documentation and formatting)


/*
*
*  Responsive attributes
*
*  References:
*  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
*  2) https://css-tricks.com/almanac/properties/f/flex/
*  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
*  5) http://godban.com.ua/projects/flexgrid
*
*
*/


/**
 * Rearrange items in a flex layout
 * Defines '.flex-order[-#{size}]-#{i}' rules for i in [-20..20]
 *
 * @param {string} $sizes space-separated size names (e.g. 'xs sm md lg xl'; default: null)
 */
@mixin flex-order-for-name($sizes: null) {
  @if $sizes == null {
    $sizes: '';
    .flex-order {
      order: 0;
    }
  }

  @for $i from -20 through 20 {
    $order: '';
    $suffix: '';

    @each $s in $sizes {
      @if $s != '' {
        $suffix: '#{$s}-#{$i}';
      }
      @else {
        $suffix: '#{$i}';
      }
      $order: '.flex-order-#{$suffix}';
    }

    #{$order} {
      order: #{$i};
    }
  }
}

/**
 * Offset items based on a 5% grid column width, with additions for 33%/66% points
 * Defines '.offset[-#{size}]-#{i}' (alias '.flex-offset[-#{size}]-#{i}') rules for i in [0,5..95] + [33,66]
 *
 * @param {string} $sizes space-separated size names (e.g. 'xs sm md lg xl'; default: null)
 */
@mixin offset-for-name($sizes: null) {
  @if $sizes == null {
    $sizes: '';
  }

  @for $i from 0 through 19 {
    $offsets: '';
    $suffix: '';

    @each $s in $sizes {
      @if $s != '' {
        $suffix: '#{$s}-#{$i * 5}';
      }
      @else {
        $suffix: '#{$i * 5}';
      }

      $offsets: '.offset-#{$suffix}, .flex-offset-#{$suffix}';
    }

    #{$offsets} {
      margin-left: #{$i * 5 + '%'};
    }
  }

  @each $i in 33 {
    $offsets: '';
    $suffix: '';

    @each $s in $sizes {
      @if $s != '' {
        $suffix: '#{$s}-#{$i}';
      }
      @else {
        $suffix: '#{$i}';
      }

      $offsets: '.offset-#{$suffix}, .flex-offset-#{$suffix} ';
    }

    #{$offsets} {
      margin-left: calc(100% / 3);
    }
  }

  @each $i in 66 {
    $offsets: '';
    $suffix: '';

    @each $s in $sizes {
      @if $s != '' {
        $suffix: '#{$s}-#{$i}';
      }
      @else {
        $suffix: '#{$i}';
      }

      $offsets: '.offset-#{$suffix}, .flex-offset-#{$suffix} ';
    }

    #{$offsets} {
      margin-left: calc(200% / 3);
    }
  }
}

/**
 * Set layout direction (row or column)
 * Defines '.layout-#{size}', '.layout-#{size}-row', and '.layout-#{size}-column'
 *
 * @param {string} $name size name (e.g. 'sm'; default: null)
 */
@mixin layout-for-name($name: null) {
  @if $name == null {
    $name: '';
  }

  @if $name != '' {
    $name: '-#{$name}';
  }

  .layout#{$name},
  .layout#{$name}-column,
  .layout#{$name}-row {
    box-sizing: border-box;
    display: flex;
  }

  .layout#{$name}-column {
    flex-direction: column;
  }

  .layout#{$name}-row {
    flex-direction: row;
  }
}

/**
 * Allow items to grow and/or shrink to fill an appropriate amount of space
 * Defines:
 *   - '.flex[-#{name}]-#{i}'    allow for item to fill a specified percent of its parent container for i in [0,5..100] + [33,66]
 *   - '.flex[-#{name}]'          allows item to grow and shrink, but starts with size of 0% (=== '.flex-0')
 *   - '.flex[-#{name}]-grow'     allows item to grow and shrink if necessary, but start with size 100% (=== 'flex-100')
 *   - '.flex[-#{name}]-initial'  allows item to shrink if necessary, but start with size based on width/height
 *   - '.flex[-#{name}]-auto'     allows item to grow and shrink if necessary, but start with size based on width/height
 *   - '.flex[-#{name}]-none'     prevents item from growing and shrinking and will stay at its defined width/height
 *   - '.flex[-#{name}]-noshrink' allows item to grow, but not shrink. size starts at width/height
 *   - '.flex[-#{name}]-nogrow'   allows item to shrink, but not grow. size starts at width/height
 *
 * @param {string} $name size name (e.g. 'sm'; default: null)
 */
@mixin flex-properties-for-name($name: null) {
  $flexName: 'flex';

  @if $name != null {
    $flexName: 'flex-#{$name}';
    $name: '-#{$name}';
  }
  @else {
    $name: '';
  }

  .#{$flexName} {
    flex: 1;
    box-sizing: border-box;
  }

  // === flex: 1 1 0%;
  // IE mediaQuery hack for 8,9,10 to set the flex-basis properly for 'flex' values
  // Details:
  // Do not use unitless flex-basis values in the flex shorthand because IE 10-11 will error.
  // Also use 0% instead of 0px since minifiers will often convert 0px to 0 (which is unitless and will have the same problem).
  // Safari, however, fails with flex-basis : 0% and requires flex-basis : 0px
  @if $name != '-print' {
    @media screen\0 {
      .#{$flexName} {
        flex: 1 1 0;
      }
    }
  }

  .#{$flexName}-grow {
    flex: 1 1 100%;
    box-sizing: border-box;
  }

  .#{$flexName}-initial {
    flex: 0 1 auto;
    box-sizing: border-box;
  }

  .#{$flexName}-auto {
    flex: 1 1 auto;
    box-sizing: border-box;
  }

  .#{$flexName}-none {
    flex: 0 0 auto;
    box-sizing: border-box;
  }

  .#{$flexName}-noshrink {
    flex: 1 0 auto;
    box-sizing: border-box;
  }

  .#{$flexName}-nogrow {
    flex: 0 1 auto;
    box-sizing: border-box;
  }

  // (1-20) * 5 = 0-100%
  @for $i from 0 through 20 {
    $value: #{$i * 5 + '%'};

    .#{$flexName}-#{$i * 5} {
      flex: 1 1 #{$value};
      max-width: #{$value};
      max-height: 100%;
      box-sizing: border-box;
    }

    .layout-row > .#{$flexName}-#{$i * 5},
    .layout#{$name}-row > .#{$flexName}-#{$i * 5} {
      flex: 1 1 #{$value};
      max-width: #{$value};
      max-height: 100%;
      box-sizing: border-box;

      // Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
      @if $i == 0 {
        min-width: 0;
      }
    }

    .layout-column > .#{$flexName}-#{$i * 5},
    .layout#{$name}-column > .#{$flexName}-#{$i * 5} {
      flex: 1 1 #{$value};
      max-width: 100%;
      max-height: #{$value};
      box-sizing: border-box;

      // Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
      @if $i == 0 {
        min-height: 0;
      }
    }
  }

  .layout-row,
  .layout#{$name}-row {
    > .#{$flexName}-33,
    > .#{$flexName}-33 {
      flex: 1 1 33.33%;
      max-width: 33.33%;
      max-height: 100%;
      box-sizing: border-box;
    }

    > .#{$flexName}-66,
    > .#{$flexName}-66 {
      flex: 1 1 66.66%;
      max-width: 66.66%;
      max-height: 100%;
      box-sizing: border-box;
    }

    // Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
    > .flex {
      min-width: 0;
    }
  }

  .layout-column,
  .layout#{$name}-column {
    > .#{$flexName}-33,
    > .#{$flexName}-33 {
      flex: 1 1 33.33%;
      max-width: 100%;
      max-height: 33.33%;
      box-sizing: border-box;
    }

    > .#{$flexName}-66,
    > .#{$flexName}-66 {
      flex: 1 1 66.66%;
      max-width: 100%;
      max-height: 66.66%;
      box-sizing: border-box;
    }

    // Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
    > .flex {
      min-height: 0;
    }
  }
}

/**
 * Align items within a layout
 * Defines '.layout-align[-#{suffix}]-#{a}[-#{b}]' for
 *   a in ['start', 'center', 'end', 'space-around', 'space-between'] and
 *   b in ['start', 'center', 'end', 'stretch']
 *
 * The first align is the primary axis: horizontal for row and vertical for column.
 * The second align is the secondary (cross) axis: vertical for row and horizontal for column.
 *
 * Default alignment for layouts is 'start-stretch'
 *
 * @param {string} $suffix size name (e.g. 'sm'; default: null)
 */
@mixin layout-align-for-name($suffix: null) {
  // Alignment attributes for layout containers' children
  // Arrange on the Main Axis
  // center, start, end, space-between, space-around
  // flex-start is the default for justify-content
  // ------------------------------
  $name: 'layout-align';

  @if $suffix != null {
    $name: 'layout-align-#{$suffix}';
  }

  .#{$name},
  .#{$name}-start-stretch // defaults
  {
    justify-content: flex-start;
    align-content: stretch;
    align-items: stretch;
  }

  // Main Axis Center
  .#{$name}-start,
  .#{$name}-start-start,
  .#{$name}-start-center,
  .#{$name}-start-end,
  .#{$name}-start-stretch {
    justify-content: flex-start;
  }

  // Main Axis Center
  //stretch
  .#{$name}-center,
  .#{$name}-center-start,
  .#{$name}-center-center,
  .#{$name}-center-end,
  .#{$name}-center-stretch {
    justify-content: center;
  }

  // Main Axis End
  //stretch
  .#{$name}-end,
  .#{$name}-end-start,
  .#{$name}-end-center,
  .#{$name}-end-end,
  .#{$name}-end-stretch {
    justify-content: flex-end;
  }

  // Main Axis Space Around
  //stretch
  .#{$name}-space-around,
  .#{$name}-space-around-center,
  .#{$name}-space-around-start,
  .#{$name}-space-around-end,
  .#{$name}-space-around-stretch {
    justify-content: space-around;
  }

  // Main Axis Space Between
  //stretch
  .#{$name}-space-between,
  .#{$name}-space-between-center,
  .#{$name}-space-between-start,
  .#{$name}-space-between-end,
  .#{$name}-space-between-stretch {
    justify-content: space-between;
  }

  // Arrange on the Cross Axis
  // center, start, end
  // stretch is the default for align-items
  // ------------------------------
  // Cross Axis Start
  .#{$name}-start-start,
  .#{$name}-center-start,
  .#{$name}-end-start,
  .#{$name}-space-between-start,
  .#{$name}-space-around-start {
    align-items: flex-start;
    align-content: flex-start;
  }

  // Cross Axis Center
  .#{$name}-start-center,
  .#{$name}-center-center,
  .#{$name}-end-center,
  .#{$name}-space-between-center,
  .#{$name}-space-around-center {
    align-items: center;
    align-content: center;
    max-width: 100%;
  }

  // Cross Axis Center IE overflow fix
  .#{$name}-start-center > *,
  .#{$name}-center-center > *,
  .#{$name}-end-center > *,
  .#{$name}-space-between-center > *,
  .#{$name}-space-around-center > * {
    max-width: 100%;
    box-sizing: border-box;
  }

  // Cross Axis End
  .#{$name}-start-end,
  .#{$name}-center-end,
  .#{$name}-end-end,
  .#{$name}-space-between-end,
  .#{$name}-space-around-end {
    align-items: flex-end;
    align-content: flex-end;
  }

  // Cross Axis Start
  .#{$name}-start-stretch,
  .#{$name}-center-stretch,
  .#{$name}-end-stretch,
  .#{$name}-space-between-stretch,
  .#{$name}-space-around-stretch {
    align-items: stretch;
    align-content: stretch;
  }
}

/**
 * Adjust spacing within and around layouts and their '.flex' children
 * Defines:
 *   - '.layout-padding[-#{size}]' and '.layout-margin[-#{size}]' rules for
 *     size in ['sm', 'md', 'lg', 'lg', 'xl', 'gt-sm', 'gt-md', 'gt-lg']
 *   - '.layout-wrap' to allow layout contents to wrap
 *   - '.layout-nowrap' to prevent layout contents from wrapping (default behavior)
 *
 * References global variable $md-layout-gutter-width;
 */
@mixin layout-padding-margin() {
  // NOTE: these`> *` selectors should only be applied for layout="row" or layout="column" children !!
  .layout-padding-sm > *,
  .layout-padding > .flex-sm {
    padding: $md-layout-gutter-width / 4;
  }

  // NOTE: these`> *` selectors should only be applied for layout="row" or layout="column" children !!
  .layout-padding,
  .layout-padding-gt-sm,
  .layout-padding-md,
  .layout-padding > *,
  .layout-padding-gt-sm > *,
  .layout-padding-md > *,
  .layout-padding > .flex,
  .layout-padding > .flex-gt-sm,
  .layout-padding > .flex-md {
    padding: $md-layout-gutter-width / 2;
  }

  // NOTE: these`> *` selectors should only be applied for layout="row" or layout="column" children !!
  .layout-padding-gt-md > *,
  .layout-padding-lg > *,
  .layout-padding-gt-lg > *,
  .layout-padding > .flex-gt-md,
  .layout-padding > .flex-lg,
  .layout-padding > .flex-lg,
  .layout-padding > .flex-gt-lg {
    padding: $md-layout-gutter-width / 1;
  }

  // Margin enhancements
  .layout-margin-sm > *,
  .layout-margin > .flex-sm {
    margin: $md-layout-gutter-width / 4;
  }

  // NOTE: these`> *` selectors should only be applied for layout="row" or layout="column" children !!
  .layout-margin,
  .layout-margin-gt-sm,
  .layout-margin-md,
  .layout-margin > *,
  .layout-margin-gt-sm > *,
  .layout-margin-md > *,
  .layout-margin > .flex,
  .layout-margin > .flex-gt-sm,
  .layout-margin > .flex-md {
    margin: $md-layout-gutter-width / 2;
  }

  // NOTE: these`> *` selectors should only be applied for layout="row" or layout="column" children !!
  .layout-margin-gt-md > *,
  .layout-margin-lg > *,
  .layout-margin-gt-lg > *,
  .layout-margin > .flex-gt-md,
  .layout-margin > .flex-lg,
  .layout-margin > .flex-gt-lg {
    margin: $md-layout-gutter-width / 1;
  }

  .layout-wrap {
    flex-wrap: wrap;
  }

  .layout-nowrap {
    flex-wrap: nowrap;
  }

  .layout-fill {
    margin: 0;
    width: 100%;
    min-height: 100%;
    height: 100%;
  }
}

/**
 * Shorthand  mixin to apply ordering, offset, align, flex values, and layout directions
 *
 * @param {string} $name breakpoint size name
 */
@mixin layouts-for-breakpoint($name: null) {
  @include flex-order-for-name($name);
  @include offset-for-name($name);
  @include layout-align-for-name($name);
  @include flex-properties-for-name($name);
  @include layout-for-name($name);
}
